<?php
// 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
// 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

// 示例 1：
// 输入：n = 2
// 输出：2
// 解释：有两种方法可以爬到楼顶。
// 1. 1 阶 + 1 阶
// 2. 2 阶
// 示例 2：

// 输入：n = 3
// 输出：3
// 解释：有三种方法可以爬到楼顶。
// 1. 1 阶 + 1 阶 + 1 阶
// 2. 1 阶 + 2 阶
// 3. 2 阶 + 1 阶
// 提示：
// 1 <= n <= 45
class Solution {

    /**
     * @param Integer $n
     * @return Integer
     */
    function climbStairs($n) {
        // -----------------方法二-------------------
        // 斐波那契数列遞迴
        // 递归
        // if ($n == 1) {
        //     return 1;
        // }
        // if ($n == 2) {
        //     return 2;
        // }
        // return $this->climbStairs($n - 1) + $this->climbStairs($n - 2);
;
        // -----------------方法一-------------------
        // 排除特殊情況
        if ($n == 1) {
            return 1;
        }
        if ($n == 2) {
            return 2;
        }
        // 費式數列
        $dp[0] = 1;
        $dp[1] = 2;
        for ($i = 2; $i < $n; $i++) {
            $dp[$i] = $dp[$i - 1] + $dp[$i - 2];
        }
        return $dp[$n - 1];
        // 這題沒有數學底子根本寫不出來。
        

    }
}
$a=new Solution();
echo "<pre>";
echo $a->climbStairs(3);